1. ติดตั้ง Python, Pip และ Django

2. สร้าง Django Project

>>$ django-admin startproject CTM

จะทำให้ได้โฟลเดอร์ CTM ซึ่งด้านในจะเก็บไฟล์ project ของ Django
- manage.py คือไฟล์ script สำหรับรันคำสั่งต่างๆ ที่เกี่ยวข้องกับ Django
- CTM/__init__.py คือไฟล์ว่างๆ มีไว้เพื่อให้ Python รู้ว่าโฟลเดอร์ที่อยู่นี้เป็นโฟลเดอร์ที่ใช้เก็บ Python Package 
- CTM/settings.py คือไฟล์ที่ใช้เก็บ configuration ทั้งหมดของ project
- CTM/urls.py คือไฟล์ที่ใช้เก็บการ routing ของ HTTP request
- CTM/wsgi.py คือไฟล์ที่ใช้เก็บข้อมูลของ Django project ของเรา ใช้สำหรับการ deploy project

>>$ python3 manage.py runserver

สามารถทดลองใช้ web browser เปิดเข้าหน้าเวปของเราได้ที่ http://localhost:8000 

3. ไฟล์ CTM/settings.py

- BASE_DIR คือตัวแปรที่เก็บ absolute path ไปหา Django project 
- SECRET_KEY คือตัวแปรที่ใช้เก็บ hash text ใช้สำหรับการเข้ารหัสสิ่งต่างๆ ใน Django project
- DEBUG คือตัวแปรที่ใช้บอก Django ว่ารันใน mode debug
- ALLOWED_HOSTS คือตัวแปรที่ใช้เก็บชื่อ domain name ของ web site เรา
- INSTALLED_APPS คือตัวแปรที่ใช้เก็บ Django Application ทั้งหมดที่ project นี้จะรู้จัก
- MIDDLEWARE คือ plugin ที่ถูกใช้งานโดย Django เพื่อใช้ในงานด้านต่างๆ
- ROOT_URLCONF คือตัวแปรที่ใช้เก็บ path ไปหาไฟล์ urls.py ซึ่งเป็นไฟล์แรกที่ Django เริ่มทำงานเมื่อได้รับ HTTP request
- TEMPLATES คือตัวแปรที่เก็บ configuration ของ Template โดย Template คือสิ่งที่รับผิดชอบในการ render หน้าเวป HTML + javascript ออกมาแล้วส่งกลับไปให้ web browser
- WSGI_APPLICATION คือตัวแปรที่ใช้เก็บ path ไปหาตัวแปร wsgi application ซึ่งถูกใช้ในการ deploy ระบบใน environment จริง เมื่อต้องการเชื่อมต่อ Django เข้ากับ web server ต่างๆ
- DATABASES คือตัวแปรที่เก็บ configuration ของ ฐานข้อมูล

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'CTM.db.sqlite3'),
    }
}

- LANGUAGE_CODE คือตัวแปรที่ใช้เก็บภาษา default ที่ระบบจะแสดงผล 
- TIME_ZONE ใช้เก็บ timezone (Asia/Bangkok)
- USE_I18N คือตัวแปรที่ใช้บอกว่าระบบรองรับ I18N (Internationalization) หรือไม่ ซึ่ง I18N คือระบบการแปลภาษาในหน้าเวปไซด์ให้รองรับหลายๆ ภาษา
- USE_L10N คือตัวแปรที่บอกว่า web server ของเรา support L10N (Localization) หรือไม่ (รูปแบบการแสดงวันที่, การแสดงหน่วยของเงิน)
- USE_TZ คือตัวแปรที่ใช้เก็บว่า web server รองรับ Time zone หรือไม่
- STATIC_URL คือตัวแปรที่ใช้เก็บ web url ไปยัง folder ที่ใช้เก็บ static ไฟล์

4. สร้าง Django Application

>>$ python manage.py startapp order

จะทำให้ได้โฟลเดอร์ order ซึ่งด้านในจะเก็บไฟล์ application ของ Django
- order/views.py เป็นไฟล์ที่ใช้เก็บ logic ของ web application คอยควบคุมสิ่งที่รับมาจาก client web browser (HTTP parameters ต่างๆ) และควบคุมสิ่งที่จะตอบกลับไปยัง client web browser

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def index(request) :
    return HttpResponse("<h1>CTM order manager</h1>")

- order/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

- CTM/urls.py 

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('order/', include('order.urls')),
    path('admin/', admin.site.urls),
]

5. Django Template
ในการทำงานของ Template นั้นเริ่มจากdkiสร้างไฟล์ HTML Template ขึ้นมา ซึ่งสิ่งทีทำให้ไฟล์ HTML นี้ต่างจากไฟล์ HTML ทั่วไปคือจะมีการฝัง Django Tag เข้าไปด้วย โดยในตัวอย่างคือการใช้ {{var1}} หมายถึงการสร้างตัวแปรของ Django ขึ้น จากนั้นเมื่อ Django โหลดไฟล์ Template นี้ขึ้นมาสามารถ pass ค่า ของตัวแปรเข้าไปสู่ไฟล์นี้ได้ หลังจากนั้นจึงได้ไฟล์ HTML ที่สมบูรณ์พร้อมส่งกลับไปแสดงผลยัง Web Browser ต่อไป

สร้าง Folder template และสร้างไฟล์ index.html

- template/index.html

<h1>CTM Order Manager</h1>
Hello, {{var1}}.

- CTM/settings.py 

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['order/template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

- order/views.py

from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader

# Create your views here.
def index(request) :
    template = loader.get_template('index.html')
    context = {
        'var1' : "member"
    }
    return HttpResponse(template.render(context,request))

---------------- OR ----------------

from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader

# Create your views here.
def index(request) :
    context = {
        'var1' : "member"
    }
    return render(request, 'index.html',context)

6. การโหลด Javascript, CSS, image
กรณีที่เราต้องการใส่ Javascript, CSS, image เข้าไปเพื่อแสดงผลในหน้าเวป สามารถทำได้โดยผ่าน static (ที่เรียกว่า static เพราะไฟล์ JS, CSS, images เป็นไฟล์ Library ที่คงที่ ไม่มีการเปลี่ยนแปลง)

สร้าง Folder static และสร้างไฟล์ style.css, image.png

- order/static/style.css

body {
    background-color: yellow;
}

- order/template/index.html

{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %} " />

<h1>CTM Order Manager</h1>
Hello, {{var1}}.
<br><img src = "{% static 'background.png' %} " />

7. Database Connection
การเข้าถึงฐานข้อมูลของ Django นั้นโดยทั่วไปจะไม่ใช้ SQL statement ตรงๆ แต่จะถูกกระทำผ่านสิ่งที่เรียกว่า Object Relational Mappings (ORM) 
ORM จะเป็นซ่อนคำสั่งของ SQL statement ทั้งหมดออกจากการพัฒนา แต่จะให้ผู้พัฒนาเข้าถึงฐานข้อมูลผ่านทาง class — object แทน
class ==> Table ในฐานข้อมูล
object ==> Recoed ในฐานข้อมูล

ซึ่งสามารถทำได้โดยการแก้ไขไฟล์ models.py 

- order/models.py 

from django.db import models

# Create your models here.
class OrderDB(models.Model) :
    OrderID = models.IntegerField(null=False, unique=True, primary_key=True)
    product = models.CharField(max_length=255)
    date_regis = models.DateTimeField('Registed Date')
    people = (
        ('cee', 'Wandee Angkura'),
        ('yui', 'aaa bbb')
    )
    person = models.CharField(choices = people, max_length=8)

- CTM/settings.py 

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'order'
]

การสร้างฐานข้อมูลจริง ๆ นั้น Django จำเป็นต้อง generate script ออกมาชุดหนึ่ง เรียกว่า Migration File ไว้ใช้สำหรับการสร้างฐานข้อมูลจริง

>>$ python manage.py makemigrations
>>$ python manage.py migrate

Django จะสร้างฐานข้อมูลชื่อ CTM.db.sqlite3 ซึ่งจะมี order_orderdb อยู่ภายใน และจะทำการสร้าง Default Table อื่นๆ ขึ้นมาด้วย

- order/template/index.html 

{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %} " />

<h1>CTM Order Manager</h1>
Hello, {{var1}}.
<br>Number of order : {{num_order}}
<br><img src = "{% static 'background.png' %} " />

- order/views.py

from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader
from order.models import OrderDB

# Create your views here.
def index(request) :
    context = {
        'var1' : "member",
        'num_order' : len(OrderDB.objects.all())
    }
    return render(request, 'index.html', context)

8. Django admin site
ซึ่งเป็นหน้าสำหรับใช้ในการทำ Database CRUD operation (Create, Read, Update, Delete) เหมาะสำหรับใช้เป็นหลังบ้านสำหรับ Web Admin ใช้บริหารงานต่าง ๆ โดยไม่ต้องเข้าถึงฐานข้อมูลโดยตรง

>>$ python manage.py createsuperuser

- order/admin.py

from django.contrib import admin
from order.models import OrderDB

# Register your models here.
admin.site.register(OrderDB)

จะเห็นว่าการแสดงผลของฐานข้อมุลไม่ถูกต้อง สามารถแก้ไขตรงนี้ได้โดยการ override function

- order/models.py 

from django.db import models

# Create your models here.
class OrderDB(models.Model) :
    OrderID = models.IntegerField(null=False, unique=True, primary_key=True)
    product = models.CharField(max_length=255)
    date_regis = models.DateTimeField('Registed Date')
    people = (
        ('cee', 'Wandee Angkura'),
        ('yui', 'aaa bbb')
    )
    person = models.CharField(choices = people, max_length=8)

    def __int__(self) :
        return self.OrderID






https://codeburst.io/เริ่มพัฒนา-web-application-กับภาษา-python-ด้วย-django-framework-38ce132ac706